from openerp.osv import osv, fields

class crm_lead(osv.osv):

    _inherit = "crm.lead"

    _columns = {
                'po_box' : fields.char('PO Box'),
                'com_phone' : fields.char('Company Phone'),
                'comp_other_phone' : fields.char('Company Other Phone'),
                'ext' : fields.char('Ext'),
                'gender' : fields.selection([('male','Male'),('female','Female')],'Gender'),
                'language' : fields.many2one('language.new','Preferred Language '),
                'gov_entity_type'  :fields.many2one('gov.entity.type','Gov. Entity Type'),
                'subsidiary' : fields.boolean('Subsidiary'),
                'vendor_registration' : fields.boolean('Vendor Registration'),
                'mobile2' : fields.char('Mobile2'),
                'birth_date' : fields.date('Date Of Birth'),
                'federal_gov' : fields.boolean('Federal Gov.'),
                'holding_company' : fields.many2one('res.partner','Holding Company'),
                'business_tower': fields.char('Business Tower'),
                'Reg' : fields.char('Reg.#'),
                'website' : fields.char('Website'),
                'annual_revenue' : fields.float('Annual Revanue(AED)'),
                'no_of_employeee' : fields.integer('No of Employee'),
                'yahoo' : fields.char('Yahoo Id'),
                'typee':fields.many2one('opportunity.type.new','Type'),
                'next':fields.many2one('next.step.ob','Next Step'),
                'lead':fields.char('Lead Source'),
                'sales_stage':fields.char('Sales Stage'),
                'assign':fields.char('Assigned To'),
                'probability':fields.char('Probability (%)'),
                'campain':fields.many2one('campaign.source','Campaign Source'),
                'entity':fields.many2one('custom.entity','Entity'),
                'tender': fields.boolean('Tender'),
                'ten_subject':fields.char('Tender Subject'),
                'ten_ref':fields.char('Tender Ref.'),
                'realese_date':fields.date('RFP Release Date'),
                'tender_close_date':fields.date('Tender Closing Date'),
                'proposal_date':fields.date('Proposal Submission Date'),
                'contac':fields.char('Contact Phone'),
                'person':fields.many2one('res.partner','Contact Person'),
                'summary':fields.text('Tender Summary'),
		'comp_email':fields.char('Company Email'),
		'generat_by':fields.many2one('res.partner','Generated By'),	
                'state' : fields.selection([('draft','Draft'),
                                           ('review1','Review 1'),
                                           ('reviewer2','Reviewer 2'),
                                           ('approver1','Approver 1'),
                                           ('approver2','Approver 2')], 'State',select=True, store=True),
                'district' : fields.many2one('district.new','District'),
                'industry' : fields.many2one('industry.custom','Industry'),
                'product_service' : fields.many2one('product.service',"Product/Service"),
                'market_partner' : fields.many2one('market.partner.new', 'Market Partner'),
                'lead_source_id' : fields.many2one('lead.source','Lead Source'),
		'name': fields.char('No', required=True, readonly=True, select=1),
		'status' : fields.many2one('status.status', 'Status'),
		'rating' : fields.many2one('custom.rating', 'Rating'),
		'company_fax' : fields.char('Company Fax'),
		'potential_name' : fields.char('Potential Name'),
		'related_to' : fields.many2one('related.to','Related To'),		
		'related_to1' : fields.many2one('res.partner','Customer')
               }
    
    _defaults = {
                 'state' : 'draft',
                 'name' :  lambda obj, cr, uid, context: obj.pool.get('ir.sequence').get(cr, uid, 'crm.lead'),
                 }
    
    def default_get(self, cr, uid, fields, context=None):
        if context is None:
            context = {}
        res = super(crm_lead, self).default_get(cr, uid, fields, context=context)
        print "\n\n________",res
        if res.get('type'):
            if res['type'] == 'opportunity':
                res['name'] = 'POT' + res['name'][3:] 
        return res
    
    def product_review1(self, cr, uid, ids, context=None):
        self.write(cr, uid, ids, {'state':'review1'})
        return True
    
    def product_reviewer2(self, cr, uid, ids, context=None):
        self.write(cr, uid, ids, {'state':'reviewer2'})
        return True
    
    def product_approver1(self, cr, uid, ids, context=None):
        self.write(cr, uid, ids, {'state':'approver1'})
        return True
    
    def product_approver2(self, cr, uid, ids, context=None):
        self.write(cr, uid, ids, {'state':'approver2'})
        return True
    
class custom_rating(osv.osv):

	_name = "custom.rating"

	_columns = {
		'name' : fields.char('Rating')
		}

class related_to(osv.osv):

	_name = "related.to"


	_columns = {
		'name' : fields.char('Related To')
		}    

class opportunity_type_new(osv.osv):
    
    _name = "opportunity.type.new"
    
    _columns = {
                'name' : fields.char('Type'),
                }
class market_partner_new(osv.osv):
    
    _name = "market.partner.new"
    
    _columns = {
                'name' : fields.char('Market Partner'),
                }   
class next_step_ob(osv.osv):
    
    _name ="next.step.ob"
    
    _columns = {
                'name' : fields.char('Next Step'),
                }   
class campaign_source(osv.osv):
    
    _name = "campaign.source"
    
    _columns = {
                'name' : fields.char('Campaign Source'),
                }
class district_new(osv.osv):
    
    _name = "district.new"
    
    _columns = {
                'name' : fields.char('District'),
                } 
class custom_entity(osv.osv):
    
    _name = "custom.entity"
    
    _columns = {
                'name' : fields.char('Entity'),
                }
class language_new(osv.osv):

    _name = "language.new"
    _columns = {
		'name':fields.char('Preferred Language'),
		}   
class industry_custom(osv.osv):

    _name = "industry.custom"
    _columns = {
		'name':fields.char('Industry'),
		}   

class product_service(osv.osv):
    
    _name = "product.service"
    
    _columns = {
                'name' : fields.char('Product/Service')
                }

class status_status(osv.osv):

	_name = "status.status"

	_columns = {
		'name' : fields.char('Status'),
		}
